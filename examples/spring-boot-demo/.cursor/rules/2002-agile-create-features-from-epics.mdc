---
description: Create agile features from an epic
globs: 
alwaysApply: false
---
# Create agile features from an epic

This rule helps me have a natural conversation with you to create detailed feature files based on an existing epic. I'll ask direct questions to gather the information I need, then generate comprehensive feature documentation.

## How I'll Help You

When you ask me to create features from an epic, here's how our conversation will flow:

**Phase 0: Get Current Date**
I'll start by getting today's date from the system to ensure accurate timestamps in the feature documents.

**Phase 1: Epic Analysis and Information Gathering**
I'll acknowledge your request and ask these direct questions:

**Epic File Analysis:**
1. "Please provide the path to the epic file you'd like to base the features on, or paste the epic content if you prefer."
2. "I've reviewed the epic '[Epic Title]'. This epic contains [summarize key components/features identified]. Is this the correct epic you want to work with?"

**Feature Scope Clarification:**
3. "Based on the epic, I've identified [X] potential features: [list identified features]. Do you want to create feature files for all of these, or would you like to focus on specific ones? If specific ones, which features should I prioritize?"
4. "For each feature, would you prefer a detailed technical feature specification or a higher-level feature overview? This will help me determine the appropriate level of detail."

**Feature Structure Preferences:**
5. "Who is the primary audience for these feature files? (e.g., 'development team', 'product stakeholders', 'QA team', 'business analysts'). This will help tailor the content appropriately."
6. "Should the feature files include technical implementation details, or focus more on functional requirements and user benefits?"

**File Organization:**
7. "What naming convention would you prefer for the feature files? (e.g., 'FEAT-001_Feature_Name.md', 'feature_name.md', or something else)"
8. "Where should these feature files be created relative to the epic file? (e.g., 'features/' subdirectory, same directory, or a specific path)"

**Feature Enhancement Questions:**
For each identified feature, I'll ask:
9. "Are there existing user stories that should be linked to '[Feature Name]', or should I suggest how this feature could be broken down into user stories?"
10. "Does '[Feature Name]' have any specific dependencies on other features, systems, or external factors not mentioned in the epic?"
11. "What specific success metrics or acceptance criteria should be defined for '[Feature Name]' beyond what's in the epic?"

**Additional Context (Optional):**
12. "Are there any specific timeline constraints or release dependencies for any of these features?"
13. "Are there any feature-specific risks or technical challenges that should be highlighted?"

**Phase 2: Feature File Generation**
Once I have all the information, I'll inform you that I'm generating the feature files. I'll use today's date (obtained from the `date` command) to replace the `[Current Date]` placeholders in the template. For each feature, I'll provide content using this format:

**Content for Feature Markdown File: `[Feature Filename From Naming Convention]`**
[agile-feature-template.md](mdc:.cursor/rules/templates/agile-feature-template.md)

**Important Note on Date Handling:**
- I always use the `date` terminal command to get the current system date
- I format the date appropriately for documentation (e.g., "June 2, 2025" or "2025-06-02")  
- I replace all `[Current Date]` placeholders in the template with the actual current date
- This ensures accurate timestamps for feature creation and last update fields

**Next Steps and Recommendations**
After generating all feature files, I'll provide these recommendations:

**Next Steps for Feature Development:**
1. Review each feature file with relevant stakeholders
2. Refine and prioritize features based on business value and dependencies
3. Break down features into detailed user stories
4. Create technical design documents for complex features
5. Estimate effort and plan feature development roadmap
6. Set up tracking and metrics collection for success criteria

**Feature Management Best Practices:**
- Keep features focused on specific user outcomes
- Regularly validate features against epic goals
- Monitor feature dependencies and adjust plans as needed
- Collect user feedback early and often during development
- Update feature documentation as requirements evolve

**Integration with Epic:**
- Ensure all features collectively deliver the epic's business value
- Verify feature priorities align with epic success criteria
- Check that feature timeline supports epic target release
- Confirm feature dependencies don't create critical path issues

That's how we'll work together to turn your epic into a set of well-defined, actionable features!

