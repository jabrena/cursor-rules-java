---
description: Generating a Task List from Agile Artifacts
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from Agile Artifacts

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on multiple agile artifacts. The task list should guide a developer through implementation using comprehensive context from user stories, acceptance criteria, technical designs, and architectural decisions.

## Input Artifacts

The AI will analyze the following agile artifacts to generate the task list:

1. **User Story** - The feature description from user perspective
2. **Acceptance Criteria** - Specific conditions that must be met
3. **UML Sequence Diagram** - Technical flow and interactions
4. **C4 Model Diagrams** - System architecture and component relationships
5. **ADR for Functional Requirements** - Architectural decisions for functional requirements
6. **ADR for Aceptance testing Strategy** - Architectural decisions for acceptance testing strategy
7. **ADR for Non Functional Requirements** - Architectural decisions for non functional requirements

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[feature-name].md` (e.g., `tasks-user-profile-editing.md`)

## Process

1. **Receive Artifact References:** The user provides paths or references to the agile artifacts listed above
2. **Analyze All Artifacts:** The AI reads and analyzes:
   - User stories and acceptance criteria for functional requirements
   - UML sequence diagrams for technical flow understanding
   - C4 diagrams for architectural context and component relationships
   - ADRs for implementation and testing decisions
3. **Phase 1: Generate Parent Tasks:** Based on the comprehensive analysis, create the file and generate the main, high-level tasks required to implement the feature. Consider:
   - User story requirements and acceptance criteria
   - Technical flow from sequence diagrams
   - Component structure from C4 diagrams
   - Implementation decisions from ADRs
   
   Use your judgement on how many high-level tasks to use (typically 5-8). Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the agile artifacts analysis. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4. **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5. **Phase 2: Generate Sub-Tasks:** Once confirmed, break down each parent task into smaller, actionable sub-tasks that:
   - Address specific acceptance criteria
   - Follow the technical flow from sequence diagrams
   - Respect architectural decisions from ADRs
   - Implement testing strategy from testing ADR
6. **Identify Relevant Files:** Based on the tasks and all artifacts, identify potential files that will need to be created or modified, considering:
   - Component structure from C4 diagrams
   - Technical interactions from sequence diagrams
   - Testing strategy from ADRs
7. **Generate Final Output:** Combine all elements into the final Markdown structure.
8. **Save Task List:** Save the generated document in the `/tasks/` directory.

## Output Format

The generated task list _must_ follow this structure:

```markdown
# Task List: [Feature Name]

## Artifact Sources

- **User Story:** `[path/to/user-story.md]`
- **Acceptance Criteria:** `[path/to/acceptance-criteria.md]`
- **UML Sequence Diagram:** `[path/to/sequence-diagram.md]`
- **C4 Model Diagrams:** `[path/to/c4-diagrams.md]`
- **ADR Functional Requirements:** `[path/to/adr-functional-requirements.md]`
- **ADR Acceptance testing Strategy:** `[path/to/adr-accentance-testing-strategy.md]`
- **ADR Non Functional Requirements:** `[path/to/adr-non-functional-requirements.md]`

## Tasks

- [ ] 1.0 [Parent Task Title - derived from user story and acceptance criteria]
  - [ ] 1.1 [Sub-task addressing specific acceptance criterion]
  - [ ] 1.2 [Sub-task implementing sequence diagram interaction]
  - [ ] 1.3 [Sub-task following ADR functional decision]
- [ ] 2.0 [Parent Task Title - technical implementation]
  - [ ] 2.1 [Sub-task creating component per C4 model]
  - [ ] 2.2 [Sub-task implementing testing per ADR strategy]
- [ ] 3.0 [Parent Task Title - integration and validation]
  - [ ] 3.1 [Sub-task validating acceptance criteria]
  - [ ] 3.2 [Sub-task ensuring architectural compliance]

## Acceptance Criteria Mapping

- [ ] AC1: [Acceptance Criterion 1] → Tasks [list of relevant task numbers]
- [ ] AC2: [Acceptance Criterion 2] → Tasks [list of relevant task numbers]
- [ ] AC3: [Acceptance Criterion 3] → Tasks [list of relevant task numbers]

## Relevant Files

- `pom.xml` - Maven project configuration with Spring Boot, JDBC dependencies, TestContainers, Flyway, PostgreSQL driver, and SpringDoc OpenAPI
- `src/main/java/info/jab/latency/MainApplication.java` - Spring Boot main application class with externalized scheduling configuration
- `src/main/java/info/jab/latency/config/SchedulingConfig.java` - Conditional scheduling configuration that can be enabled/disabled via properties
- `src/main/java/info/jab/latency/controller/GreekGodsController.java` - Spring REST Controller for /api/v1/gods/greek endpoint with OpenAPI annotations
- `src/main/java/info/jab/latency/controller/GlobalExceptionHandler.java` - Global error handling with @ControllerAdvice using RFC 7807 ProblemDetail standard for consistent error response format

### Notes

- Test implementation follows the testing strategy defined in the Testing ADR
- Component structure aligns with C4 model architecture
- Technical flow respects sequence diagram interactions
- Implementation decisions follow functional requirements ADR
- Use `./mvnw clean verify` to run tests
```

## Enhanced Analysis Process

When analyzing the artifacts, the AI should:

1. **User Story Analysis:** Extract the core functionality and user value
2. **Acceptance Criteria Analysis:** Identify specific, testable requirements
3. **Sequence Diagram Analysis:** Understand technical flow, system interactions, and data flow
4. **C4 Model Analysis:** Identify components, their relationships, and architectural boundaries
5. **Functional ADR Analysis:** Understand implementation decisions, technology choices, and constraints
6. **Testing ADR Analysis:** Understand testing approach, tools, coverage requirements, and quality gates
7. **Non Functional ADR Analysis:** Understand implementation decisions ISO 25010

## Interaction Model

The process maintains the two-phase approach:
1. **Phase 1:** Generate high-level tasks and wait for "Go" confirmation
2. **Phase 2:** Generate detailed sub-tasks with full artifact context

## Target Audience

Assume the primary reader is a **senior softwware engineer or tech-lead** who will implement the feature with full context of the agile artifacts and architectural decisions.

## Benefits of This Enhanced Approach

- **Comprehensive Context:** Tasks are generated with full understanding of user needs, technical design, and architectural decisions
- **Traceability:** Clear mapping between acceptance criteria and implementation tasks
- **Architectural Alignment:** Tasks respect system design and component boundaries
- **Testing Integration:** Testing tasks are naturally integrated based on defined strategy
- **Decision Context:** Implementation follows documented architectural decisions 
