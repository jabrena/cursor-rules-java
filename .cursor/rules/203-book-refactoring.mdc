---
description: Java rules from the book "Refactoring" by Martin Fowler
globs: **/*.java
alwaysApply: false
---
# Effective Refactoring Principles

## Table of contents

- Rule 1: Core Refactoring Process
- Rule 2: Strategic Considerations for Refactoring
- Rule 3: Refactoring and Performance
- Rule 4: Identifying and Addressing Bad Code Smells

## Rule 1: Core Refactoring Process

Title: Core Refactoring Process
Description:
Key steps and philosophies for effective refactoring:
1.  **Test, Change Small, Repeat**: Refactor in small, incremental steps, running tests after each change to ensure no behavior is broken.
2.  **Method Cohesion (Extract Method & Move Method)**: Class methods should primarily use data from their own class. If a method uses more data from another class, consider moving it. If a method is too long or does too many things, extract parts into new, well-named methods.
3.  **Avoid Local Temporary Variables**: Excessive temporary variables can increase complexity and lead to longer methods. Try to replace them by querying methods or other refactorings like "Replace Temp with Query".
4.  **Replace Conditional with Polymorphism**: Instead of using conditional logic (if/else, switch) to vary behavior based on an object's type or state, use polymorphism. This often involves creating subclasses or strategy objects.

**Good example:** (Illustrating "Extract Method" and "Replace Temp with Query")

```java
// Before Refactoring (Long method with temp variables)
class Order {
    private double quantity;
    private double itemPrice;

    public Order(double quantity, double itemPrice) {
        this.quantity = quantity;
        this.itemPrice = itemPrice;
    }

    public double calculateTotal() {
        double basePrice = quantity * itemPrice;
        double discountFactor;
        if (basePrice > 1000) {
            discountFactor = 0.95; // 5% discount
        } else {
            discountFactor = 0.98; // 2% discount
        }
        double discountedPrice = basePrice * discountFactor;
        double shippingCost = Math.min(basePrice * 0.1, 100.0); // 10% shipping, max $100
        return discountedPrice + shippingCost;
    }
}

// After Refactoring
class RefactoredOrder {
    private double quantity;
    private double itemPrice;

    public RefactoredOrder(double quantity, double itemPrice) {
        this.quantity = quantity;
        this.itemPrice = itemPrice;
    }

    private double getBasePrice() { // Extracted method, replaces temp variable
        return quantity * itemPrice;
    }

    private double getDiscountFactor() { // Extracted method
        return (getBasePrice() > 1000) ? 0.95 : 0.98;
    }
    
    private double getDiscountedPrice() { // Extracted method
        return getBasePrice() * getDiscountFactor();
    }

    private double getShippingCost() { // Extracted method
        return Math.min(getBasePrice() * 0.1, 100.0);
    }

    public double calculateTotal() {
        return getDiscountedPrice() + getShippingCost();
    }

    public static void main(String[] args) {
        Order oldOrder = new Order(10, 150);
        System.out.println("Old order total: " + oldOrder.calculateTotal());

        RefactoredOrder newOrder = new RefactoredOrder(10, 150);
        System.out.println("New order total: " + newOrder.calculateTotal());
    }
}
```

**Bad Example:** (Illustrating a long method that could benefit from extraction)

```java
// Long method difficult to understand and maintain
import java.util.List; // Added import

public class ReportGenerator {
    public String generateReport(List<User> users, boolean includeDetails, boolean isAdminReport) {
        StringBuilder report = new StringBuilder();
        if (isAdminReport) {
            report.append("--- Admin Report ---\n");
            report.append("Total Users: ").append(users.size()).append("\n");
        } else {
            report.append("--- User Report ---\n");
        }
        report.append("User Data:\n");
        for (User user : users) {
            report.append("ID: ").append(user.getId());
            report.append(", Name: ").append(user.getName());
            if (includeDetails) {
                // Imagine more complex logic here for details
                report.append(", Email: ").append(user.getEmail());
                if (user.isActive() && isAdminReport) {
                    report.append(", Status: Active Admin");
                    // ... more admin specific details
                } else if (user.isActive()) {
                    report.append(", Status: Active");
                } else {
                    report.append(", Status: Inactive");
                }
            }
            report.append("\n");
        }
        // ... potentially more sections and logic ...
        report.append("--- End of Report ---");
        return report.toString();
    }
    // Dummy User class for context
    static class User {
        private int id; private String name; private String email; private boolean active;
        public User(int id, String name, String email, boolean active) { this.id = id; this.name = name; this.email = email; this.active = active; }
        public int getId() { return id; }
        public String getName() { return name; }
        public String getEmail() { return email; }
        public boolean isActive() { return active; }
    }
}
```

## Rule 2: Strategic Considerations for Refactoring

Title: Strategic Considerations for Refactoring
Description:
Understand when and how refactoring fits into the development lifecycle:
-   **When to Avoid Refactoring**:
    1.  **Close to Deadline**: If a critical deadline is approaching, introducing refactoring might destabilize the codebase unless the changes are minor and critical for stability.
    2.  **Rewrite is More Efficient**: Sometimes, a system is so fundamentally flawed that rewriting from scratch (or a major component) is a better investment than incremental refactoring.
-   **Refactoring and Design**:
    1.  **Design for Current Problems (Simplified Design)**: Prioritize designing solutions for the current, known requirements. Avoid over-engineering for speculative future needs.
    2.  **Refactor for Future Extensions**: When new requirements or extensions arise, use refactoring to adapt the existing, simplified design to accommodate them cleanly. This is often called "Opportunistic Refactoring."

**Good example:** (Conceptual: Starting simple, refactoring when needed)

```java
// Initial simple design for a NotificationService
interface NotificationService {
    void sendNotification(String userId, String message);
}

class EmailNotificationService implements NotificationService {
    @Override
    public void sendNotification(String userId, String message) {
        System.out.println("Sending Email to " + userId + ": " + message);
        // Actual email sending logic...
    }
}

// Later, a new requirement: Add SMS notifications.
// We refactor to support this without massive changes to existing clients.
// (This might involve introducing a factory or changing how NotificationService is provided)

interface Notifier { // Potentially new or evolved interface
    void send(String recipient, String message);
}

class EmailNotifier implements Notifier {
    @Override
    public void send(String emailAddress, String message) {
        System.out.println("Email to " + emailAddress + ": " + message);
    }
}

class SmsNotifier implements Notifier {
    @Override
    public void send(String phoneNumber, String message) {
        System.out.println("SMS to " + phoneNumber + ": " + message);
    }
}

// Client code can now use different notifiers
public class NotificationManager {
    private Notifier notifier;

    public NotificationManager(Notifier notifier) {
        this.notifier = notifier;
    }

    public void notifyUser(String contact, String message) {
        notifier.send(contact, message);
    }

    public static void main(String[] args) {
        NotificationManager emailManager = new NotificationManager(new EmailNotifier());
        emailManager.notifyUser("user@example.com", "Your order has shipped!");

        NotificationManager smsManager = new NotificationManager(new SmsNotifier());
        smsManager.notifyUser("+1234567890", "Your package is out for delivery.");
    }
}
```

**Bad Example:** (Over-engineering upfront)

```java
// Over-engineered for features that might never be needed.
// This can make the initial development slow and the code complex.
abstract class AbstractNotificationSystem {
    abstract void connect();
    abstract void authenticate();
    abstract void preparePayload(String message);
    abstract void sendPayload();
    abstract void disconnect();
    abstract void logStatus();
    // ... many other abstract methods for a generic system

    public final void send(String message) { // Template method
        connect();
        authenticate();
        preparePayload(message);
        sendPayload();
        logStatus();
        disconnect();
    }
}

// Even for a simple email, we need to implement many methods.
class AdvancedEmailSystem extends AbstractNotificationSystem {
    private String recipient;
    public AdvancedEmailSystem(String recipient) { this.recipient = recipient; }
    @Override void connect() { System.out.println("Connecting to advanced email server..."); }
    @Override void authenticate() { System.out.println("Authenticating with complex tokens..."); }
    @Override void preparePayload(String message) { System.out.println("Preparing XML payload for: " + recipient + " with msg: " + message); }
    @Override void sendPayload() { System.out.println("Sending XML payload..."); }
    @Override void disconnect() { System.out.println("Disconnecting from email server."); }
    @Override void logStatus() { System.out.println("Logging to enterprise monitoring system."); }
}

public class Main {
    public static void main(String[] args) {
        AdvancedEmailSystem emailSystem = new AdvancedEmailSystem("test@example.com");
        emailSystem.send("Hello! This system is very advanced!");
        // This was a lot of setup for a simple email, and what if we only ever needed email?
    }
}

```

## Rule 3: Refactoring and Performance

Title: Refactoring and Performance
Description:
Balancing code clarity with performance:
1.  **Refactoring Can Initially Slow Down Code**: Some refactorings (e.g., extracting methods) might introduce minor performance overhead. However, well-structured code is easier to optimize later.
2.  **Don't Optimize Without Measurement**: Avoid premature optimization. Only optimize after identifying actual performance bottlenecks through profiling.
3.  **Approaches to Optimization**:
    *   **Budgeting**: Allocate a "performance budget" and optimize only when it's exceeded.
    *   **Optimizing All Along (Constant Attention)**: This is often wasteful, as most optimizations (around 90%) target code that isn't a performance bottleneck.
    *   **Optimize at the End (Recommended for most cases)**: After the system is functional, use a profiler to measure, identify bottlenecks, and then optimize that specific code.
4.  **Reference**: McConnel on performance (suggests further reading on performance optimization strategies).

**Good example:** (Focus on clarity first, optimize if needed after profiling)

```java
import java.util.List;
import java.util.stream.Collectors;

// Clear, readable code using streams
public class DataProcessor {
    public List<String> processAndFilter(List<String> data) {
        return data.stream()
                   .map(String::trim)
                   .filter(s -> !s.isEmpty())
                   .map(String::toUpperCase)
                   .collect(Collectors.toList());
    }
// If profiling later shows this method is a bottleneck for very large datasets,
// one might consider a more imperative, potentially faster, loop-based approach.
// But start with clarity.

    public static void main(String[] args) {
        DataProcessor processor = new DataProcessor();
        List<String> myData = List.of(" apple ", " banana", "", " CHERRY ", "date");
        System.out.println("Processed data: " + processor.processAndFilter(myData));
    }
}
```

**Bad Example:** (Premature optimization sacrificing clarity)

```java
import java.util.ArrayList;
import java.util.List;

// Obscure code due to premature micro-optimizations
public class FastDataProcessor {
    public List<String> processAndFilter(List<String> data) {
        List<String> result = new ArrayList<>(data.size()); // Pre-allocate
        for (int i = 0; i < data.size(); i++) {
            String item = data.get(i);
            // Manual trim (less readable than String.trim())
            int len = item.length();
            int st = 0;
            while ((st < len) && (item.charAt(st) <= ' ')) {
                st++;
            }
            while ((st < len) && (item.charAt(len - 1) <= ' ')) {
                len--;
            }
            String trimmedItem = ((st > 0) || (len < item.length())) ? item.substring(st, len) : item;

            if (trimmedItem.length() == 0) { // isEmpty() is clearer
                continue;
            }
            // Manual toUpperCase (less readable and potentially error-prone)
            char[] chars = trimmedItem.toCharArray();
            for (int j = 0; j < chars.length; j++) {
                if (chars[j] >= 'a' && chars[j] <= 'z') {
                    chars[j] = (char) (chars[j] - 32);
                }
            }
            result.add(new String(chars));
        }
        return result;
    }
    public static void main(String[] args) {
        FastDataProcessor processor = new FastDataProcessor();
        List<String> myData = List.of(" apple ", " banana", "", " CHERRY ", "date");
        System.out.println("Fast processed data: " + processor.processAndFilter(myData));
    }
}
```

## Rule 4: Identifying and Addressing Bad Code Smells

Title: Identifying and Addressing Bad Code Smells
Description:
"Bad smells" are symptoms in the code that may indicate deeper problems. Addressing them often leads to better design.
Common bad smells include:

1.  **Duplicated Code**: The same or very similar code exists in more than one location.
    *   *Refactoring*: Extract Method, Pull Up Method, Form Template Method.
2.  **Long Method**: A method contains too many lines of code. Long methods are hard to understand, maintain, and reuse.
    *   *Refactoring*: Extract Method, Replace Temp with Query, Introduce Parameter Object, Decompose Conditional.
3.  **Large Class**: A class tries to do too much, having too many instance variables, methods, or lines of code.
    *   *Refactoring*: Extract Class, Extract Subclass, Extract Interface, Replace Data Value with Object.
4.  **Long Parameter List**: A method has too many parameters, making it hard to call and understand.
    *   *Refactoring*: Introduce Parameter Object, Preserve Whole Object, Replace Parameter with Method Call.
5.  **Divergent Change**: One class is commonly changed in different ways for different reasons. E.g., changing one part of a system requires many unrelated changes within a single class.
    *   *Refactoring*: Extract Class (to separate responsibilities).
6.  **Shotgun Surgery**: A single change requires making many small changes in multiple classes.
    *   *Refactoring*: Move Method, Move Field, Inline Class (to consolidate related behavior).
7.  **Feature Envy**: A method in one class seems more interested in the data of another class than its own.
    *   *Refactoring*: Move Method (to move the method closer to the data it uses), Extract Method (and then possibly Move Method). (Note: Visitor and Strategy patterns can be exceptions, intentionally separating data and algorithms).
8.  **Data Clumps**: Bunches of data items that regularly appear together in multiple places (e.g., parameters, fields).
    *   *Refactoring*: Extract Class (to turn the data clump into its own object), Introduce Parameter Object, Preserve Whole Object.

**Good example:** (Addressing "Data Clumps")

```java
// Before: Data Clump (street, city, zipCode appear together)
class Customer {
    private String name;
    private String addressStreet;
    private String addressCity;
    private String addressZipCode;

    public Customer(String name, String street, String city, String zip) {
        this.name = name;
        this.addressStreet = street;
        this.addressCity = city;
        this.addressZipCode = zip;
    }
    public String getFullAddress() {
        return addressStreet + ", " + addressCity + ", " + addressZipCode;
    }
}

// After: Extract Class for Address
class Address {
    private String street;
    private String city;
    private String zipCode;

    public Address(String street, String city, String zipCode) {
        this.street = street;
        this.city = city;
        this.zipCode = zipCode;
    }
    public String getFullAddress() {
        return street + ", " + city + ", " + zipCode;
    }
}

class RefactoredCustomer {
    private String name;
    private Address address; // Address is now an object

    public RefactoredCustomer(String name, Address address) {
        this.name = name;
        this.address = address;
    }
    public String getCustomerInfo() {
        return "Name: " + name + "\\nAddress: " + address.getFullAddress();
    }

    public static void main(String[] args) {
        Address addr = new Address("123 Main St", "Anytown", "12345");
        RefactoredCustomer cust = new RefactoredCustomer("John Doe", addr);
        System.out.println(cust.getCustomerInfo());
    }
}
```

**Bad Example:** (Illustrating "Long Parameter List" and "Feature Envy")

```java
import java.util.List; // Added import

class OrderProcessor {
    // Long Parameter List
    public void processOrder(int customerId, String customerName, String customerEmail, 
                             String shippingStreet, String shippingCity, String shippingZip,
                             String billingStreet, String billingCity, String billingZip,
                             List<Item> items, double discountPercentage) {
        
        // ... logic using all these parameters ...

        // Feature Envy: This part might be too interested in CustomerDetails
        CustomerDetails details = new CustomerDetails(customerId, customerName, customerEmail /* ... */);
        if (details.isPreferredCustomer()) { // Method in OrderProcessor envies CustomerDetails
            // apply special discount
        }
        System.out.println("Processing order for " + customerName + " with " + items.size() + " items.");
    }
    // Dummy classes for context
    static class Item {}
    static class CustomerDetails {
        public CustomerDetails(int id, String name, String email) { /* ... */ }
        public boolean isPreferredCustomer() { return true; /* ... logic ... */ }
    }
}
```
---
*(End of rules based on "Refactoring" summary)*