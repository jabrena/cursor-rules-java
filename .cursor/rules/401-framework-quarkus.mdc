---
description: Quarkus development guidelines
globs: .java
alwaysApply: true
---
# Quarkus

## Development Best Practices

coding_standards:
  general:
    - "Use Quarkus extensions instead of standard libraries when available"
    - "Follow cloud-native design patterns"
    - "Use configuration profiles effectively"

  dependency_injection:
    - "Prefer constructor injection"
    - "Use @ApplicationScoped for singleton beans"
    - "Leverage CDI events for loose coupling"
    - "Use qualifiers to disambiguate beans"

  configuration:
    recommended_approach:
      - "Use application.properties/application.yaml for configuration"
      - "Leverage MicroProfile Config annotations"
      - "Use profiles for environment-specific config"
    example: |
      @ConfigProperty(name = "app.greeting")
      String greeting;

  testing:
    practices:
      - "Use @QuarkusTest for integration tests"
      - "Implement @QuarkusTestResource for test resources"
      - "Use RestAssured for endpoint testing"
      - "Leverage TestContainers for integration tests"
      - "Use mocking sparingly - prefer real components"
    example: |
      @QuarkusTest
      public class ResourceTest {
          @Test
          public void testEndpoint() {
              given()
                .when().get("/hello")
                .then()
                  .statusCode(200);
          }
      }

## Performance Optimization

performance_guidelines:
  startup:
    - "Minimize classpath scanning"
    - "Use build time initialization"
    - "Avoid reflection usage"
    - "Leverage GraalVM native compilation"
  
  runtime:
    - "Optimize database queries"
    - "Use connection pooling"
    - "Implement caching where appropriate"

## Cloud Native Development

cloud_native:
  containerization:
    - "Use container-first approach"
    - "Implement proper health checks"
    - "Use distroless base images"
    - "Optimize container image size"
    - "Include metrics endpoints"

  kubernetes:
    - "Use Kubernetes extensions"
    - "Implement proper liveness/readiness probes"
    - "Use ConfigMaps and Secrets"
    - "Implement proper resource limits"
    - "Use Kubernetes native services"

## Extension Development

extension_guidelines:
  best_practices:
    - "Follow the extension development guide"
    - "Implement build time initialization"
    - "Provide proper configuration documentation"
    - "Include integration tests"
    - "Follow semantic versioning"

## Security Best Practices

security:
  authentication:
    - "Use built-in security features"
    - "Implement proper RBAC"
    - "Use JWT validation"
    - "Implement proper session management"
    - "Use secure communication protocols"

  authorization:
    - "Implement method-level security"
    - "Use security annotations"
    - "Implement proper role checking"
    - "Use security events"
    - "Implement audit logging"

## Monitoring and Observability

monitoring:
  metrics:
    - "Use MicroProfile Metrics"
    - "Implement custom metrics"
    - "Use proper metric naming"
    - "Include business metrics"
    - "Monitor performance indicators"

  logging:
    - "Use structured logging"
    - "Implement proper log levels"
    - "Include correlation IDs"
    - "Use MDC context"
    - "Configure proper log rotation"

  tracing:
    - "Use OpenTracing/OpenTelemetry"
    - "Implement distributed tracing"
    - "Include proper span tags"
    - "Monitor service dependencies"
    - "Track latency metrics"

## Development Workflow

workflow:
  development:
    - "Use dev mode (quarkus:dev)"
    - "Leverage hot reload"
    - "Implement proper testing strategy"
    - "Use continuous integration"
    - "Implement proper versioning"

  deployment:
    - "Use proper deployment pipelines"
    - "Implement blue-green deployments"
    - "Use proper environment configuration"
    - "Implement proper backup strategy"
    - "Use proper monitoring and alerting"

## Recommended Extensions

essential_extensions:
  core:
    - "quarkus-rest"
    - "quarkus-security"
    - "quarkus-smallrye-openapi"
    - "quarkus-hibernate-orm-panach"
  
  testing:
    - "quarkus-junit5"
    - "rest-assured"
    - "testcontainers"
    
  monitoring:
    - "quarkus-smallrye-metrics"
    - "quarkus-smallrye-health"
    - "quarkus-opentelemetry"
