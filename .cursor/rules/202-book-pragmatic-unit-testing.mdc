---
description: Java rules from the book "Pragmatic Unit Testing: Summary"
globs: **/*Test.java
alwaysApply: false
---
# Pragmatic Unit Testing Guidelines

## Table of contents

- Rule 1: General Principles for Unit Testing
- Rule 2: Key Questions to Guide Test Creation
- Rule 3: Characteristics of Good Tests (A-TRIP)
- Rule 4: Verifying CORRECT Boundary Conditions

## Rule 1: General Principles for Unit Testing

Title: General Principles for Unit Testing
Description:
- Test anything that might break.
- Test everything that does break.
- New code is guilty until proven innocent.
- Write at least as much test code as production code.
- Run local tests with each compile.
- Run all tests before check-in to repository.

**Good example:**

```java
// Example: Testing a simple utility method
import java.util.Objects;
public class StringUtils {
    public static boolean isEmpty(String str) {
        return Objects.isNull(str) || str.trim().isEmpty();
    }
}

// Test class
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class StringUtilsTest {

    @Test
    void isEmpty_nullString_returnsTrue() {
        assertTrue(StringUtils.isEmpty(null), "Null string should be empty");
    }

    @Test
    void isEmpty_emptyString_returnsTrue() {
        assertTrue(StringUtils.isEmpty(""), "Empty string should be empty");
    }

    @Test
    void isEmpty_blankString_returnsTrue() {
        assertTrue(StringUtils.isEmpty("   "), "Blank string should be empty");
    }

    @Test
    void isEmpty_nonEmptyString_returnsFalse() {
        assertFalse(StringUtils.isEmpty("hello"), "Non-empty string should not be empty");
    }
}
```

**Bad Example:**

```java
// No tests written for StringUtils.isEmpty()
// Production code is pushed without verification, assuming it works.
// This violates "New code is guilty until proven innocent" and "Write at least as much test code as production code".
public class Main {
    public static void main(String[] args) {
        System.out.println("Is '  ' empty? " + StringUtils.isEmpty("  ")); // Potentially buggy, untested code
    }
}
```

## Rule 2: Key Questions to Guide Test Creation

Title: Key Questions to Guide Test Creation
Description:
- If the code ran correctly, how would I know?
- How am I going to test this?
- What else can go wrong?
- Could this same kind of problem happen anywhere else?
- What to Test: Use Your RIGHT-BICEP
  - Are the results **R**ight?
  - Are all the **B**oundary conditions CORRECT?
  - Can you check **I**nverse relationships?
  - Can you **C**ross-check results using other means?
  - Can you force **E**rror conditions to happen?
  - Are **P**erformance characteristics within bounds?

**Good example:**

```java
// Testing a calculator's add method, considering RIGHT-BICEP
public class Calculator {
    public int add(int a, int b) {
        if ((long)a + b > Integer.MAX_VALUE || (long)a + b < Integer.MIN_VALUE) {
            throw new ArithmeticException("Integer overflow");
        }
        return a + b;
    }
}

// Test class
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorTest {

    private final Calculator calculator = new Calculator();

    // R - Right results
    @Test
    void add_simplePositiveNumbers_returnsCorrectSum() {
        assertEquals(5, calculator.add(2, 3), "2 + 3 should be 5");
    }

    // B - Boundary conditions (e.g., with zero, negative numbers, max/min values)
    @Test
    void add_numberAndZero_returnsNumber() {
        assertEquals(5, calculator.add(5, 0), "5 + 0 should be 5");
    }

    @Test
    void add_positiveAndNegative_returnsCorrectSum() {
        assertEquals(1, calculator.add(5, -4), "5 + (-4) should be 1");
    }
    
    @Test
    void add_nearMaxInteger_returnsCorrectSum() {
        assertEquals(Integer.MAX_VALUE, calculator.add(Integer.MAX_VALUE -1, 1));
    }

    // I - Inverse relationships (e.g., subtraction)
    // (Not directly applicable for a simple add, but if we had subtract: result - b == a)

    // C - Cross-check (e.g., add(a,b) == add(b,a))
    @Test
    void add_commutativeProperty_holdsTrue() {
        assertEquals(calculator.add(2, 3), calculator.add(3, 2), "Addition should be commutative");
    }

    // E - Error conditions (e.g., overflow)
    @Test
    void add_integerOverflow_throwsArithmeticException() {
        assertThrows(ArithmeticException.class, () -> {
            calculator.add(Integer.MAX_VALUE, 1);
        }, "Adding 1 to MAX_VALUE should cause overflow");
    }
    
    @Test
    void add_integerUnderflow_throwsArithmeticException() {
         assertThrows(ArithmeticException.class, () -> {
            calculator.add(Integer.MIN_VALUE, -1);
        }, "Subtracting 1 from MIN_VALUE should cause underflow");
    }

    // P - Performance (Not typically unit tested unless specific requirements)
    // @Test
    // void add_performance_isWithinAcceptableLimits() {
    //     // Potentially a more complex performance test scenario
    // }
}
```

**Bad Example:**

```java
// Test only covers one simple case (violates "Thorough" from A-TRIP, and doesn't consider RIGHT-BICEP)
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class CalculatorTestPoor {
    private final Calculator calculator = new Calculator();

    @Test
    void add_basicTest() {
        assertEquals(4, calculator.add(2, 2)); // Only testing one happy path.
                                              // No boundary conditions, no error conditions, etc.
    }
}
```

## Rule 3: Characteristics of Good Tests (A-TRIP)

Title: Characteristics of Good Tests (A-TRIP)
Description:
Good tests are A-TRIP:
- **A**utomatic: Tests should run without human intervention.
- **T**horough: Test everything that could break; cover edge cases.
- **R**epeatable: Tests should produce the same results every time, in any environment.
- **I**ndependent: Tests should not rely on each other or on the order of execution.
- **P**rofessional: Test code is real code; keep it clean, maintainable, and well-documented.
- *(Note: The original summary also listed "Conformance", which might be a typo or specific context. "Professional" is often the 'P' in common mnemonics like A-TRIP or FIRST.)*


**Good example:**

```java
// Demonstrating A-TRIP principles
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

// Production class (simplified)
import java.util.Objects;
class OrderProcessor {
    private List<String> items;

    public OrderProcessor() {
        this.items = new ArrayList<>();
    }

    public void addItem(String item) {
        if (Objects.isNull(item) || item.trim().isEmpty()) {
            throw new IllegalArgumentException("Item cannot be null or empty");
        }
        this.items.add(item);
    }

    public int getItemCount() {
        return this.items.size();
    }

    public void clearItems() {
        this.items.clear();
    }
}


// Test class demonstrating A-TRIP
public class OrderProcessorTest {

    private OrderProcessor processor;

    // Automatic: Part of JUnit test suite, runs with build tools.
    // Independent: Each test sets up its own state.
    @BeforeEach
    void setUp() {
        processor = new OrderProcessor(); // Fresh instance for each test
    }

    // Thorough: Testing adding valid items.
    @Test
    void addItem_validItem_increasesCount() {
        processor.addItem("Laptop");
        assertEquals(1, processor.getItemCount());
        processor.addItem("Mouse");
        assertEquals(2, processor.getItemCount());
    }

    // Thorough: Testing an edge case (adding null).
    @Test
    void addItem_nullItem_throwsIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> {
            processor.addItem(null);
        });
    }
    
    // Thorough: Testing another edge case (adding empty string).
    @Test
    void addItem_emptyItem_throwsIllegalArgumentException() {
         assertThrows(IllegalArgumentException.class, () -> {
            processor.addItem("   ");
        });
    }

    // Repeatable: No external dependencies that change (e.g., time, random numbers without seed).
    // This test will always pass or always fail consistently.
    @Test
    void getItemCount_afterClearing_isZero() {
        processor.addItem("Keyboard");
        processor.clearItems();
        assertEquals(0, processor.getItemCount());
    }

    // Professional: Code is clean, uses meaningful names, follows conventions.
}
```

**Bad Example:**

```java
// Violating A-TRIP principles
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BadOrderProcessorTest {
    // Violates Independent: static processor shared between tests can lead to order dependency.
    private static OrderProcessor sharedProcessor = new OrderProcessor();

    @Test
    void test1_addItem() {
        // Assumes this runs first or that sharedProcessor is empty.
        sharedProcessor.addItem("Book");
        assertEquals(1, sharedProcessor.getItemCount()); // Might fail if other tests run first and add items.
                                                        // This makes it NOT Repeatable consistently.
    }

    @Test
    void test2_addAnotherItem() {
        sharedProcessor.addItem("Pen");
        // The expected count depends on whether test1_addItem ran and succeeded.
        // assertEquals(2, sharedProcessor.getItemCount()); // Unreliable
        assertTrue(sharedProcessor.getItemCount() > 0); // Weaker assertion due to lack of independence.
    }

    // Violates Automatic: If a test required manual setup (e.g., "Ensure database server X is running and has Y data")
    // Violates Thorough: Might only test happy paths.
    // Violates Professional: Unclear test names, messy code, reliance on external state.
}
```

## Rule 4: Verifying CORRECT Boundary Conditions

Title: Verifying CORRECT Boundary Conditions
Description:
Ensure your tests check the following boundary conditions (CORRECT):
- **C**onformance: Does the value conform to an expected format? (e.g., email format, date format)
- **O**rdering: Is the set of values ordered or unordered as appropriate? (e.g., sorted list, items in a queue)
- **R**ange: Is the value within reasonable minimum and maximum values? (e.g., age > 0, percentage 0-100)
- **R**eference: Does the code reference anything external that isn't under direct control of the code itself? (e.g., file existence, network connection - often for integration tests, but can apply to unit tests with mocks)
- **E**xistence: Does the value exist? (e.g., is non-null, non-zero, present in a set)
- **C**ardinality: Are there exactly enough values? (e.g., expecting 1 result, 0 results, N results)
- **T**ime (absolute and relative): Is everything happening in order? At the right time? In time? (e.g., timeouts, sequence of events)

**Good example:**

```java
// Example: Testing a method that validates a user registration age.
import java.util.Objects;
public class UserValidation {
    private static final int MIN_AGE = 18;
    private static final int MAX_AGE = 120;

    public boolean isAgeValid(int age) {
        // R - Range
        return age >= MIN_AGE && age <= MAX_AGE;
    }

    public boolean isValidEmailFormat(String email) {
        if (Objects.isNull(email)) return false;
        // C - Conformance (simplified regex for demonstration)
        return email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$");
    }
    
    // E - Existence
    public boolean processUsername(String username) {
        if (Objects.isNull(username) || username.trim().isEmpty()) {
            // Checks for existence (non-null, non-empty)
            return false; 
        }
        // process username
        return true;
    }
}

// Test class
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;

public class UserValidationTest {
    private final UserValidation validator = new UserValidation();

    // Testing Range for age
    @Test
    void isAgeValid_ageAtLowerBound_returnsTrue() {
        assertTrue(validator.isAgeValid(18));
    }

    @Test
    void isAgeValid_ageAtUpperBound_returnsTrue() {
        assertTrue(validator.isAgeValid(120));
    }
    
    @Test
    void isAgeValid_ageWithinBounds_returnsTrue() {
        assertTrue(validator.isAgeValid(35));
    }

    @Test
    void isAgeValid_ageBelowLowerBound_returnsFalse() {
        assertFalse(validator.isAgeValid(17));
    }

    @Test
    void isAgeValid_ageAboveUpperBound_returnsFalse() {
        assertFalse(validator.isAgeValid(121));
    }

    // Testing Conformance for email
    @ParameterizedTest
    @ValueSource(strings = {"user@example.com", "user.name@sub.example.co.uk"})
    void isValidEmailFormat_validEmails_returnsTrue(String email) {
        assertTrue(validator.isValidEmailFormat(email));
    }

    @ParameterizedTest
    @ValueSource(strings = {"userexample.com", "user@", "@example.com", "user @example.com", ""})
    void isValidEmailFormat_invalidEmails_returnsFalse(String email) {
        assertFalse(validator.isValidEmailFormat(email));
    }
    
    @Test
    void isValidEmailFormat_nullEmail_returnsFalse() {
        assertFalse(validator.isValidEmailFormat(null));
    }

    // Testing Existence for username
    @Test
    void processUsername_validUsername_returnsTrue() {
        assertTrue(validator.processUsername("john_doe"));
    }

    @Test
    void processUsername_nullUsername_returnsFalse() {
        assertFalse(validator.processUsername(null));
    }
    
    @Test
    void processUsername_emptyUsername_returnsFalse() {
        assertFalse(validator.processUsername(""));
    }

    @Test
    void processUsername_blankUsername_returnsFalse() {
        assertFalse(validator.processUsername("   "));
    }
}
```

**Bad Example:**

```java
// Only testing one happy path for age validation, ignoring boundaries.
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class UserValidationPoorTest {
    private final UserValidation validator = new UserValidation();

    @Test
    void isAgeValid_typicalAge_returnsTrue() {
        assertTrue(validator.isAgeValid(25)); // Only one value tested.
                                             // Min, max, below min, above max are not tested.
    }
    
    @Test
    void isValidEmailFormat_typicalEmail_returnsTrue() {
        assertTrue(validator.isValidEmailFormat("test@example.com")); // No invalid formats, no nulls.
    }
}

```
---
*(End of rules based on "Pragmatic Unit Testing" summary)*
